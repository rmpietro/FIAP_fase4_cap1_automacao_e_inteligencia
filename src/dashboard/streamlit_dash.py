
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.figure_factory as ff
import json
import sys
import os

# Adicionar o diret√≥rio pai ao PATH para importar data_analysis
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from data_analysis import SensorDataAnalyzer

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de Monitoramento Agr√≠cola",
    page_icon="üå±",
    layout="wide"
)

# Fun√ß√£o para carregar os dados
@st.cache_data
def load_data():
    analyzer = SensorDataAnalyzer('../dados/dados_app.json')
    return analyzer.load_data()

# Carregar dados
df = load_data()

# Sidebar para navega√ß√£o
page = st.sidebar.selectbox(
    "Escolha uma p√°gina",
    ["An√°lise Explorat√≥ria", "Modelo Preditivo"]
)

# P√°gina de An√°lise Explorat√≥ria
if page == "An√°lise Explorat√≥ria":
    st.title("üìä An√°lise Explorat√≥ria dos Dados")
    
    # An√°lise Univariada
    st.header("An√°lise Univariada")
    col1, col2 = st.columns(2)
    
    with col1:
        # Box plots para vari√°veis num√©ricas
        fig_box = px.box(df, y=['temp', 'hum', 'pH'], 
                        title="Distribui√ß√£o das Vari√°veis Num√©ricas")
        st.plotly_chart(fig_box)
    
    with col2:
        # Histogramas
        fig_hist = px.histogram(df, x='temp', title="Distribui√ß√£o da Temperatura")
        st.plotly_chart(fig_hist)
    
    # An√°lise Bivariada
    st.header("An√°lise Bivariada")
    col3, col4 = st.columns(2)
    
    with col3:
        # Scatter plot
        fig_scatter = px.scatter(df, x='temp', y='hum', 
                               color='estado_irrigacao',
                               title="Temperatura vs Umidade")
        st.plotly_chart(fig_scatter)
    
    with col4:
        # Violin plot
        fig_violin = px.violin(df, y='pH', x='estado_irrigacao',
                             title="Distribui√ß√£o do pH por Estado de Irriga√ß√£o")
        st.plotly_chart(fig_violin)
    
    # An√°lise de Correla√ß√£o
    st.header("An√°lise de Correla√ß√£o")
    numeric_cols = df[['temp', 'hum', 'pH']].corr()
    fig_corr = px.imshow(numeric_cols,
                        title="Mapa de Correla√ß√£o",
                        color_continuous_scale='RdBu')
    st.plotly_chart(fig_corr)

# P√°gina do Modelo Preditivo
elif page == "Modelo Preditivo":
    st.title("ü§ñ Modelo Preditivo")
    
    # Treinar modelo
    analyzer = SensorDataAnalyzer('../dados/dados_app.json')
    results = analyzer.train_model()
    
    # M√©tricas do modelo
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Acur√°cia do Modelo", f"{results['accuracy']:.2%}")
    
    # Feature Importance
    st.header("Import√¢ncia das Features")
    fig_importance = px.bar(results['feature_importance'],
                          x='feature', y='importance',
                          title="Import√¢ncia das Features")
    st.plotly_chart(fig_importance)
    
    # Previs√µes para as pr√≥ximas 24 horas
    st.header("Previs√µes para as Pr√≥ximas 24 Horas")
    predictions = analyzer.predict_next_24h()
    
    # Converter previs√µes para DataFrame
    pred_df = pd.DataFrame(predictions)
    pred_df['timestamp'] = pd.to_datetime(pred_df['timestamp'])
    
    # Gr√°fico de probabilidade das previs√µes
    fig_pred = px.line(pred_df, x='timestamp', y='probabilidade',
                      title="Probabilidade das Previs√µes",
                      labels={'probabilidade': 'Probabilidade',
                             'timestamp': 'Hor√°rio'})
    st.plotly_chart(fig_pred)
    
    # Tabela com as previs√µes
    st.dataframe(pred_df)

# Adicionar footer
st.markdown("---")
st.markdown("Dashboard desenvolvido para monitoramento agr√≠cola - FIAP")
